// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ddpoll.proto

package ddpoll

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PollStreamConfig_RankBy int32

const (
	PollStreamConfig_Time          PollStreamConfig_RankBy = 0
	PollStreamConfig_Participation PollStreamConfig_RankBy = 1
	PollStreamConfig_Stars         PollStreamConfig_RankBy = 2
)

var PollStreamConfig_RankBy_name = map[int32]string{
	0: "Time",
	1: "Participation",
	2: "Stars",
}

var PollStreamConfig_RankBy_value = map[string]int32{
	"Time":          0,
	"Participation": 1,
	"Stars":         2,
}

func (x PollStreamConfig_RankBy) String() string {
	return proto.EnumName(PollStreamConfig_RankBy_name, int32(x))
}

func (PollStreamConfig_RankBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{2, 0}
}

type Poll_DisplayType int32

const (
	Poll_OnVote   Poll_DisplayType = 0
	Poll_OnReveal Poll_DisplayType = 1
)

var Poll_DisplayType_name = map[int32]string{
	0: "OnVote",
	1: "OnReveal",
}

var Poll_DisplayType_value = map[string]int32{
	"OnVote":   0,
	"OnReveal": 1,
}

func (x Poll_DisplayType) String() string {
	return proto.EnumName(Poll_DisplayType_name, int32(x))
}

func (Poll_DisplayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{3, 0}
}

type AuthQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthQuery) Reset()         { *m = AuthQuery{} }
func (m *AuthQuery) String() string { return proto.CompactTextString(m) }
func (*AuthQuery) ProtoMessage()    {}
func (*AuthQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{0}
}

func (m *AuthQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthQuery.Unmarshal(m, b)
}
func (m *AuthQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthQuery.Marshal(b, m, deterministic)
}
func (m *AuthQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthQuery.Merge(m, src)
}
func (m *AuthQuery) XXX_Size() int {
	return xxx_messageInfo_AuthQuery.Size(m)
}
func (m *AuthQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthQuery.DiscardUnknown(m)
}

var xxx_messageInfo_AuthQuery proto.InternalMessageInfo

func (m *AuthQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthQuery) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthResp struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResp) Reset()         { *m = AuthResp{} }
func (m *AuthResp) String() string { return proto.CompactTextString(m) }
func (*AuthResp) ProtoMessage()    {}
func (*AuthResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{1}
}

func (m *AuthResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResp.Unmarshal(m, b)
}
func (m *AuthResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResp.Marshal(b, m, deterministic)
}
func (m *AuthResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResp.Merge(m, src)
}
func (m *AuthResp) XXX_Size() int {
	return xxx_messageInfo_AuthResp.Size(m)
}
func (m *AuthResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResp.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResp proto.InternalMessageInfo

func (m *AuthResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type PollStreamConfig struct {
	ShowVoted            bool                    `protobuf:"varint,1,opt,name=showVoted,proto3" json:"showVoted,omitempty"`
	RankBy               PollStreamConfig_RankBy `protobuf:"varint,2,opt,name=rankBy,proto3,enum=ddpoll.PollStreamConfig_RankBy" json:"rankBy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PollStreamConfig) Reset()         { *m = PollStreamConfig{} }
func (m *PollStreamConfig) String() string { return proto.CompactTextString(m) }
func (*PollStreamConfig) ProtoMessage()    {}
func (*PollStreamConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{2}
}

func (m *PollStreamConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollStreamConfig.Unmarshal(m, b)
}
func (m *PollStreamConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollStreamConfig.Marshal(b, m, deterministic)
}
func (m *PollStreamConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollStreamConfig.Merge(m, src)
}
func (m *PollStreamConfig) XXX_Size() int {
	return xxx_messageInfo_PollStreamConfig.Size(m)
}
func (m *PollStreamConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PollStreamConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PollStreamConfig proto.InternalMessageInfo

func (m *PollStreamConfig) GetShowVoted() bool {
	if m != nil {
		return m.ShowVoted
	}
	return false
}

func (m *PollStreamConfig) GetRankBy() PollStreamConfig_RankBy {
	if m != nil {
		return m.RankBy
	}
	return PollStreamConfig_Time
}

type Poll struct {
	Id                   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                string           `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Category             string           `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	DisplayType          Poll_DisplayType `protobuf:"varint,4,opt,name=displayType,proto3,enum=ddpoll.Poll_DisplayType" json:"displayType,omitempty"`
	Tags                 []string         `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Options              []string         `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{3}
}

func (m *Poll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Poll.Unmarshal(m, b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return xxx_messageInfo_Poll.Size(m)
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Poll) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Poll) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Poll) GetDisplayType() Poll_DisplayType {
	if m != nil {
		return m.DisplayType
	}
	return Poll_OnVote
}

func (m *Poll) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Poll) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type SearchQuery struct {
	PollID               int32    `protobuf:"varint,1,opt,name=pollID,proto3" json:"pollID,omitempty"`
	Keywords             string   `protobuf:"bytes,2,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Tags                 string   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	NumResultsMax        int32    `protobuf:"varint,4,opt,name=numResultsMax,proto3" json:"numResultsMax,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchQuery) Reset()         { *m = SearchQuery{} }
func (m *SearchQuery) String() string { return proto.CompactTextString(m) }
func (*SearchQuery) ProtoMessage()    {}
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{4}
}

func (m *SearchQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchQuery.Unmarshal(m, b)
}
func (m *SearchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchQuery.Marshal(b, m, deterministic)
}
func (m *SearchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQuery.Merge(m, src)
}
func (m *SearchQuery) XXX_Size() int {
	return xxx_messageInfo_SearchQuery.Size(m)
}
func (m *SearchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQuery proto.InternalMessageInfo

func (m *SearchQuery) GetPollID() int32 {
	if m != nil {
		return m.PollID
	}
	return 0
}

func (m *SearchQuery) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *SearchQuery) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *SearchQuery) GetNumResultsMax() int32 {
	if m != nil {
		return m.NumResultsMax
	}
	return 0
}

type SearchResp struct {
	NumResultsActual     int32    `protobuf:"varint,1,opt,name=numResultsActual,proto3" json:"numResultsActual,omitempty"`
	Polls                []*Poll  `protobuf:"bytes,2,rep,name=polls,proto3" json:"polls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResp) Reset()         { *m = SearchResp{} }
func (m *SearchResp) String() string { return proto.CompactTextString(m) }
func (*SearchResp) ProtoMessage()    {}
func (*SearchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_907ccde7d6668e21, []int{5}
}

func (m *SearchResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResp.Unmarshal(m, b)
}
func (m *SearchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResp.Marshal(b, m, deterministic)
}
func (m *SearchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResp.Merge(m, src)
}
func (m *SearchResp) XXX_Size() int {
	return xxx_messageInfo_SearchResp.Size(m)
}
func (m *SearchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResp proto.InternalMessageInfo

func (m *SearchResp) GetNumResultsActual() int32 {
	if m != nil {
		return m.NumResultsActual
	}
	return 0
}

func (m *SearchResp) GetPolls() []*Poll {
	if m != nil {
		return m.Polls
	}
	return nil
}

func init() {
	proto.RegisterEnum("ddpoll.PollStreamConfig_RankBy", PollStreamConfig_RankBy_name, PollStreamConfig_RankBy_value)
	proto.RegisterEnum("ddpoll.Poll_DisplayType", Poll_DisplayType_name, Poll_DisplayType_value)
	proto.RegisterType((*AuthQuery)(nil), "ddpoll.AuthQuery")
	proto.RegisterType((*AuthResp)(nil), "ddpoll.AuthResp")
	proto.RegisterType((*PollStreamConfig)(nil), "ddpoll.PollStreamConfig")
	proto.RegisterType((*Poll)(nil), "ddpoll.Poll")
	proto.RegisterType((*SearchQuery)(nil), "ddpoll.SearchQuery")
	proto.RegisterType((*SearchResp)(nil), "ddpoll.SearchResp")
}

func init() {
	proto.RegisterFile("ddpoll.proto", fileDescriptor_907ccde7d6668e21)
}

var fileDescriptor_907ccde7d6668e21 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x9b, 0xb6, 0x89, 0xed, 0x69, 0x77, 0x49, 0xcf, 0xca, 0x12, 0x8a, 0xe0, 0x32, 0x08,
	0x2e, 0x5e, 0x94, 0xa5, 0x22, 0x82, 0x82, 0xd0, 0xb5, 0x0a, 0x22, 0xb2, 0xeb, 0x74, 0xd1, 0x1b,
	0x6f, 0x66, 0x9b, 0xb1, 0x1d, 0x36, 0xcd, 0x84, 0x99, 0x89, 0x35, 0xf8, 0x28, 0xbe, 0x8d, 0xaf,
	0xe1, 0xcb, 0xc8, 0x4c, 0x92, 0x36, 0x55, 0xbc, 0xcb, 0xff, 0xcf, 0xc9, 0xe4, 0x3b, 0xff, 0x39,
	0x81, 0x61, 0x1c, 0x67, 0x32, 0x49, 0x26, 0x99, 0x92, 0x46, 0x62, 0x50, 0x2a, 0xf2, 0x12, 0xfa,
	0xb3, 0xdc, 0xac, 0x3f, 0xe6, 0x5c, 0x15, 0x88, 0xd0, 0x4d, 0xd9, 0x86, 0x47, 0xde, 0x99, 0x77,
	0xde, 0xa7, 0xee, 0x19, 0xc7, 0xd0, 0xcb, 0x98, 0xd6, 0x5b, 0xa9, 0xe2, 0xa8, 0xed, 0xfc, 0x9d,
	0x26, 0x04, 0x7a, 0xf6, 0x65, 0xca, 0x75, 0x86, 0xa7, 0x10, 0x68, 0xc3, 0x4c, 0xae, 0xdd, 0xdb,
	0x3e, 0xad, 0x14, 0xf9, 0xe9, 0x41, 0x78, 0x2d, 0x93, 0x64, 0x61, 0x14, 0x67, 0x9b, 0xd7, 0x32,
	0xfd, 0x2a, 0x56, 0xf8, 0x00, 0xfa, 0x7a, 0x2d, 0xb7, 0x9f, 0xa4, 0xe1, 0xb1, 0xab, 0xef, 0xd1,
	0xbd, 0x81, 0xcf, 0x21, 0x50, 0x2c, 0xbd, 0xbb, 0x2c, 0xdc, 0x07, 0x8f, 0xa7, 0x0f, 0x27, 0x15,
	0xfa, 0xdf, 0xf7, 0x4c, 0xa8, 0x2b, 0xa3, 0x55, 0x39, 0xb9, 0x80, 0xa0, 0x74, 0xb0, 0x07, 0xdd,
	0x1b, 0xb1, 0xe1, 0x61, 0x0b, 0x47, 0x70, 0x74, 0xcd, 0x94, 0x11, 0x4b, 0x91, 0x31, 0x23, 0x64,
	0x1a, 0x7a, 0xd8, 0x07, 0x7f, 0x61, 0x98, 0xd2, 0x61, 0x9b, 0xfc, 0xf6, 0xa0, 0x6b, 0x6f, 0xc5,
	0x63, 0x68, 0x8b, 0xb8, 0x42, 0x6f, 0x8b, 0x18, 0xef, 0x83, 0x2f, 0xb7, 0x29, 0x57, 0x55, 0xcf,
	0xa5, 0xb0, 0x61, 0x2c, 0x99, 0xe1, 0x2b, 0xa9, 0x8a, 0xa8, 0x53, 0x86, 0x51, 0x6b, 0x7c, 0x01,
	0x83, 0x58, 0xe8, 0x2c, 0x61, 0xc5, 0x4d, 0x91, 0xf1, 0xa8, 0xeb, 0xd0, 0xa3, 0x26, 0xfa, 0x64,
	0xbe, 0x3f, 0xa7, 0xcd, 0x62, 0x1b, 0xbc, 0x61, 0x2b, 0x1d, 0xf9, 0x67, 0x1d, 0x1b, 0xbc, 0x7d,
	0xc6, 0x08, 0xee, 0xc9, 0xcc, 0x12, 0xeb, 0x28, 0x70, 0x76, 0x2d, 0xc9, 0x63, 0x18, 0x34, 0x6e,
	0x42, 0x80, 0xe0, 0x2a, 0xb5, 0xc9, 0x85, 0x2d, 0x1c, 0x42, 0xef, 0x2a, 0xa5, 0xfc, 0x1b, 0x67,
	0x49, 0xe8, 0x91, 0x1f, 0x30, 0x58, 0x70, 0xa6, 0x96, 0xd5, 0x78, 0x4f, 0x21, 0xb0, 0x2c, 0xef,
	0xe6, 0xf5, 0x88, 0x4a, 0x65, 0xbb, 0xba, 0xe3, 0x85, 0x9d, 0xa8, 0xae, 0x47, 0x5c, 0xeb, 0x1d,
	0x59, 0xd9, 0x6d, 0x49, 0xf6, 0x08, 0x8e, 0xd2, 0x7c, 0x43, 0xb9, 0xce, 0x13, 0xa3, 0x3f, 0xb0,
	0xef, 0xae, 0x57, 0x9f, 0x1e, 0x9a, 0xe4, 0x0b, 0x40, 0xf9, 0x71, 0xb7, 0x1e, 0x4f, 0x20, 0xdc,
	0x1f, 0xcf, 0x96, 0x26, 0x67, 0x49, 0x45, 0xf1, 0x8f, 0x8f, 0x04, 0x7c, 0x4b, 0x66, 0x61, 0x3a,
	0xe7, 0x83, 0xe9, 0xb0, 0x99, 0x21, 0x2d, 0x8f, 0xa6, 0xbf, 0x3c, 0x08, 0xe6, 0x73, 0x37, 0xba,
	0x67, 0x30, 0xb4, 0x5b, 0xc8, 0x53, 0x23, 0xec, 0x30, 0x70, 0x54, 0xd7, 0xef, 0x16, 0x7b, 0x1c,
	0x36, 0x2d, 0xcb, 0x43, 0x5a, 0x38, 0x83, 0x93, 0x37, 0xda, 0xb0, 0xdb, 0x44, 0xe8, 0xf5, 0x7e,
	0xb1, 0x30, 0xfa, 0xdf, 0xb2, 0x8d, 0x0f, 0x38, 0x48, 0xeb, 0xc2, 0xc3, 0x57, 0x30, 0x7a, 0x2b,
	0xd2, 0xd8, 0xea, 0xcb, 0xe2, 0x3d, 0x2f, 0x3e, 0x4b, 0x15, 0xe3, 0x49, 0x5d, 0xd6, 0x88, 0x7e,
	0x8c, 0x87, 0x66, 0x89, 0x70, 0x1b, 0xb8, 0x7f, 0xf1, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb4, 0xa3, 0xf6, 0x75, 0x9b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DDPollClient is the client API for DDPoll service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DDPollClient interface {
	Authenticate(ctx context.Context, in *AuthQuery, opts ...grpc.CallOption) (*AuthResp, error)
	EstablishPollStream(ctx context.Context, in *PollStreamConfig, opts ...grpc.CallOption) (DDPoll_EstablishPollStreamClient, error)
	FindPollByKeyWord(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*SearchResp, error)
}

type dDPollClient struct {
	cc grpc.ClientConnInterface
}

func NewDDPollClient(cc grpc.ClientConnInterface) DDPollClient {
	return &dDPollClient{cc}
}

func (c *dDPollClient) Authenticate(ctx context.Context, in *AuthQuery, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, "/ddpoll.DDPoll/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDPollClient) EstablishPollStream(ctx context.Context, in *PollStreamConfig, opts ...grpc.CallOption) (DDPoll_EstablishPollStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DDPoll_serviceDesc.Streams[0], "/ddpoll.DDPoll/EstablishPollStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dDPollEstablishPollStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DDPoll_EstablishPollStreamClient interface {
	Recv() (*Poll, error)
	grpc.ClientStream
}

type dDPollEstablishPollStreamClient struct {
	grpc.ClientStream
}

func (x *dDPollEstablishPollStreamClient) Recv() (*Poll, error) {
	m := new(Poll)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dDPollClient) FindPollByKeyWord(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/ddpoll.DDPoll/FindPollByKeyWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDPollServer is the server API for DDPoll service.
type DDPollServer interface {
	Authenticate(context.Context, *AuthQuery) (*AuthResp, error)
	EstablishPollStream(*PollStreamConfig, DDPoll_EstablishPollStreamServer) error
	FindPollByKeyWord(context.Context, *SearchQuery) (*SearchResp, error)
}

// UnimplementedDDPollServer can be embedded to have forward compatible implementations.
type UnimplementedDDPollServer struct {
}

func (*UnimplementedDDPollServer) Authenticate(ctx context.Context, req *AuthQuery) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedDDPollServer) EstablishPollStream(req *PollStreamConfig, srv DDPoll_EstablishPollStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EstablishPollStream not implemented")
}
func (*UnimplementedDDPollServer) FindPollByKeyWord(ctx context.Context, req *SearchQuery) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPollByKeyWord not implemented")
}

func RegisterDDPollServer(s *grpc.Server, srv DDPollServer) {
	s.RegisterService(&_DDPoll_serviceDesc, srv)
}

func _DDPoll_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDPollServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddpoll.DDPoll/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDPollServer).Authenticate(ctx, req.(*AuthQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDPoll_EstablishPollStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PollStreamConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DDPollServer).EstablishPollStream(m, &dDPollEstablishPollStreamServer{stream})
}

type DDPoll_EstablishPollStreamServer interface {
	Send(*Poll) error
	grpc.ServerStream
}

type dDPollEstablishPollStreamServer struct {
	grpc.ServerStream
}

func (x *dDPollEstablishPollStreamServer) Send(m *Poll) error {
	return x.ServerStream.SendMsg(m)
}

func _DDPoll_FindPollByKeyWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDPollServer).FindPollByKeyWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddpoll.DDPoll/FindPollByKeyWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDPollServer).FindPollByKeyWord(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDPoll_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ddpoll.DDPoll",
	HandlerType: (*DDPollServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _DDPoll_Authenticate_Handler,
		},
		{
			MethodName: "FindPollByKeyWord",
			Handler:    _DDPoll_FindPollByKeyWord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EstablishPollStream",
			Handler:       _DDPoll_EstablishPollStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ddpoll.proto",
}
